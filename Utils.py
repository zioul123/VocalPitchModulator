import numpy as np
import librosa
import librosa.display
import matplotlib.pyplot as plt

#################################################################
# 3D to flattened array utilities
#################################################################

def flatten_3d_array(arr, i_lim, j_lim, k_lim):
    """Takes a 3d array, and returns a 1d array.

    Args: 
        arr (list): A 3d array (i_lim, j_lim, k_lim)
        i_lim (int): The length of the first dimension of arr
        j_lim (int): The length of the second dimension of arr
        k_lim (int): The length of the third dimension of arr
    
    Returns:
        A 1d list of length i_lim * j_lim * k_lim
    """
    return  [ arr[i][j][k] 
              for i in range(i_lim) 
              for j in range(j_lim) 
              for k in range(k_lim) ]

def flat_array_idx(i, j, k, i_lim, j_lim, k_lim):
    """Used to get the index of flattened arrays as a 3d arrays.
    
    This is used to access arrays that have been flattened
    by flatten_3d_array.

    Args:
        i/j/k (int): The indices to access the array as arr[i][j][k]
        i_lim (int): The length of the first dimension of arr
        j_lim (int): The length of the second dimension of arr
        k_lim (int): The length of the third dimension of arr

    Returns:
        An int representing the array index of the flattened array
            that functions as the accessor to the index [i][j][k]
            in the original 3d array.
    """
    return i * j_lim * k_lim + j * k_lim + k

def nd_array_idx(idx, i_lim, j_lim, k_lim):
    """Used to get the 3d index from a flat array index.

    This is the inverse of flat_array_idx.

    Args:
        idx (int): The index to access the flat array.
        i_lim (int): The length of the first dimension of arr
        j_lim (int): The length of the second dimension of arr
        k_lim (int): The length of the third dimension of arr

    Returns:
        Three ints representing the i, j, k index to access the
            original 3d array.
    """
    return int(idx / (j_lim * k_lim)), \
           int((idx % (j_lim * k_lim)) / k_lim), \
           int(idx % (k_lim))

#################################################################
# Graphing utilities
#################################################################

def plot_ffts_spectrogram(ffts, sample_rate, file_name=None):
    """This function plots a spectrogram generated by stft

    Args:
        ffts (np.ndarray): An matrix of ffts, where the ffts[f, t]
            provides the complex value of the fft at frequency bin f
            at frame t.
        sample_rate (int): The sample rate at which the stft was taken.
        file_name (str): To be put into the title of the plot.
    """
    librosa.display.specshow(librosa.amplitude_to_db(np.abs(ffts), ref=np.max), 
        y_axis='linear', x_axis='time', sr=sample_rate)
    plt.title('Power spectrogram{}'.format(
        "" if file_name is None else " of {}".format(file_name)))
    plt.colorbar(format='%+2.0f dB')
    plt.tight_layout()
    plt.show()

def plot_mel_spectrogram(mel_freq_spec, sample_rate, file_name=None):
    """This function plots a mel spectrogram generated by ffts_to_mel

    Args:
        mel_freq_spec (np.ndarray): An matrix of mel spectra, where the 
            mel_freq_spec[m, t] provides the value of the mel bin m at frame t.
        sample_rate (int): The sample rate at which the stft was taken.
        file_name (str): To be put into the title of the plot.
    """
    plt.figure(figsize=(10, 4))
    S_dB = librosa.power_to_db(mel_freq_spec, ref=np.max)
    librosa.display.specshow(S_dB, x_axis='time', y_axis='mel', sr=sample_rate, fmax=sample_rate/2.0)
    plt.colorbar(format='%+2.0f dB')
    plt.title('Mel-frequency spectrogram')
    plt.tight_layout()
    plt.show()

def plot_mfcc(mfccs, sample_rate, file_name=None):
    """This function plots a mfcc generated by ffts_to_mel

    Args:
        mfccs (np.ndarray): An matrix of MFCC features, where
            mfccs[m, t] provides the values of the MFCC feature m at frame t.
        sample_rate (int): The sample rate at which the stft was taken.
        file_name (str): To be put into the title of the plot.
    """

    plt.figure(figsize=(10,4))
    librosa.display.specshow(mfccs, x_axis='time')
    plt.colorbar()
    plt.title('MFCC')
    plt.tight_layout()
    plt.show()
